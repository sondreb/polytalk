name: Release PolyTalk

on:
  workflow_dispatch: 

permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  build:
    name: Build (${{ matrix.name }})
    strategy:
        matrix:
          include:
            - name: Windows x64
              os: windows-latest
              extension: ".zip"
              runtime: "win-x64"
            # - name: Windows ARM64
            #   os: windows-latest
            #   extension: ".zip"
            #   runtime: "win-arm64"
            - name: Linux x64
              os: ubuntu-latest
              extension: ".tar.gz"
              runtime: "linux-x64"
            # - name: macOS x64
            #   os: macos-13
            #   runtime: "osx-x64"
            #   extension: ".zip"
            - name: macOS ARM64
              os: macos-latest
              runtime: "osx-arm64"
              extension: ".zip"
        fail-fast: false
  
    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
  
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '22'
        cache: 'npm'

    - name: Install Rust (Stable)
      uses: actions-rs/toolchain@v1
      with:
          toolchain: stable
          override: true


    - name: Variables
      run: |
        echo VERSION=$(npm run version-number --silent) >> $GITHUB_ENV
      shell: bash

    # - name: Version
    #   run: |
    #       BASE_VERSION=$(npm run version-number --silent)
    #       # Remove last digit and dot, then append run number
    #       VERSION=$(echo $BASE_VERSION | sed 's/\.[0-9]*$/.'${{ github.run_number }}/)
    #       echo "VERSION=$VERSION" >> $GITHUB_ENV
    #   shell: bash

    # - name: Update package.json version
    #   run: npm version $VERSION --no-git-tag-version
    #   shell: bash

    - name: Install dependencies
      run: npm ci

    - name: Install Playwright browsers
      run: npx playwright install --with-deps

    # - name: Run unit tests
    #   run: npm run test -- --watch=false

    - name: Run E2E tests
      run: npm run e2e
      env:
        # Add CI environment variable to indicate running in CI environment
        CI: true

    - name: Install Linux dependencies
      if: matrix.os == 'ubuntu-latest'
      run: |
            sudo apt-get update
            sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.0-dev webkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf libsoup-3.0-dev libjavascriptcoregtk-4.1-dev

    - name: Install and build
      run: |
        npm install
        npm run tauri:build:${{ matrix.runtime }}

    - name: Rename Linux files
      if: matrix.os == 'ubuntu-latest'
      run: |
        mv src-tauri/target/x86_64-unknown-linux-gnu/release/bundle/appimage/PolyTalk_${{ env.VERSION }}_amd64.AppImage src-tauri/target/x86_64-unknown-linux-gnu/release/bundle/appimage/polytalk-desktop-${{ env.VERSION }}-linux-amd64.AppImage

    - name: Rename Mac files
      if: matrix.runtime == 'osx-x64'
      run: |
        mv src-tauri/target/aarch64-apple-darwin/release/bundle/dmg/PolyTalk_${{ env.VERSION }}_aarch64.dmg src-tauri/target/aarch64-apple-darwin/release/bundle/dmg/polytalk-desktop-${{ env.VERSION }}-mac-aarch64.dmg

    - name: Rename Mac files
      if: matrix.runtime == 'osx-arm64'
      run: |
          mv src-tauri/target/aarch64-apple-darwin/release/bundle/dmg/PolyTalk_${{ env.VERSION }}_aarch64.dmg src-tauri/target/aarch64-apple-darwin/release/bundle/dmg/polytalk-desktop-${{ env.VERSION }}-mac-aarch64.dmg

    - name: Rename Windows files
      if: matrix.runtime == 'win-x64'
      run: |
        mv src-tauri/target/x86_64-pc-windows-msvc/release/bundle/msi/PolyTalk_${{ env.VERSION }}_x64_en-US.msi src-tauri/target/x86_64-pc-windows-msvc/release/bundle/msi/polytalk-desktop-${{ env.VERSION }}-win-x64.msi

    - name: Rename Windows files
      if: matrix.runtime == 'win-arm64'
      run: |
          mv src-tauri/target/release/bundle/msi/PolyTalk_${{ env.VERSION }}_arm64_en-US.msi src-tauri/target/release/bundle/msi/polytalk-desktop-${{ env.VERSION }}-win-arm64.msi

    - uses: actions/upload-artifact@v4
      name: Upload Linux
      if: matrix.os == 'ubuntu-latest'
      with:
          name: polytalk-desktop-${{ env.VERSION }}-linux-amd64.AppImage
          path: src-tauri/target/x86_64-unknown-linux-gnu/release/bundle/appimage/polytalk-desktop-${{ env.VERSION }}-linux-amd64.AppImage

    - uses: actions/upload-artifact@v4
      name: Upload Mac
      if: matrix.os == 'macos-latest'
      with:
        name: polytalk-desktop-${{ env.VERSION }}-mac-aarch64.dmg
        path: src-tauri/target/aarch64-apple-darwin/release/bundle/dmg/polytalk-desktop-${{ env.VERSION }}-mac-aarch64.dmg

    - uses: actions/upload-artifact@v4
      name: Upload Windows
      if: matrix.runtime == 'win-x64'
      with:
          name: polytalk-desktop-${{ env.VERSION }}-win-x64.msi
          path: src-tauri/target/x86_64-pc-windows-msvc/release/bundle/msi/polytalk-desktop-${{ env.VERSION }}-win-x64.msi

    - uses: actions/upload-artifact@v4
      name: Upload Windows
      if: matrix.runtime == 'win-arm64'
      with:
              name: polytalk-desktop-${{ env.VERSION }}-win-arm64.msi
              path: src-tauri/target/x86_64-pc-windows-msvc/release/bundle/msi/polytalk-desktop-${{ env.VERSION }}-win-arm64.msi
    

  create-release:
    name: Publish (Release)
    needs: build
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3

    - name: Variables
      run: |
          echo VERSION=$(npm run version-number --silent) >> $GITHUB_ENV
      shell: bash

    - name: Download Artifacts 
      uses: actions/download-artifact@v4
      with:
        path: artifacts
        merge-multiple: true
    
    - name: List Files
      run: ls -R

    - name: Create Release and Upload Assets
      uses: softprops/action-gh-release@v1
      env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
          tag_name: ${{ env.VERSION }}
          name: PolyTalk (${{ env.VERSION }})
          draft: true
          files: |
            artifacts/*
